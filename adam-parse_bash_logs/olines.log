xray_heasoft_blank () {  [ "$LHEASOFT" ] || return 1;
 local var syspfiles=${PFILES#*;};
 for var in LD_LIBRARY_PATH PATH PERLLIB PERL5LIB syspfiles;
 do
 remove_element $var "$LHEASOFT/*" ":";
 done;
 [ "$PFILES" ] && PFILES="${PFILES%%;*};$syspfiles";
 return 0
}
oracdr_wfcam5 () {  . ${ORAC_DIR}/etc/oracdr_wfcam5.sh
}
oracdr_sofi () {  . ${ORAC_DIR}/etc/oracdr_sofi.sh
}
oracdr_iris2 () {  . ${ORAC_DIR}/etc/oracdr_iris2.sh
}
oracdr_classiccam () {  . ${ORAC_DIR}/etc/oracdr_classiccam.sh
}
echomop () {  . $ECHOMOP_DIR/echomop.sh
}
cursasetup () {  . $CURSA_DIR/cursa.sh
}
xray_sas_blank () {  local OIFS="$IFS" list="SAS_CCF SAS_ODF" i;
 [ "$1" = "all" ] && { 
 for i in PATH LD_LIBRARY_PATH PERL5LIB;
 do
 remove_element $i "*/sas/*";
 done;
 list=`set | egrep ^SAS`;
 IFS="=

"
 };
 for i in $list;
 do
 [ -z "$i" -o "${i#SAS}" = "$i" ] && continue;
 unset $i;
 done;
 IFS="$OIFS"
}
cursa () {  . $CURSA_DIR/cursa.sh
}
surfsetup () {  . $SURF_DIR/surf.sh
}
hdstoolssetup () {  . $HDSTOOLS_DIR/hdstools.sh
}
espsetup () {  . $ESP_DIR/esp.sh
}
autoastrom () {  ${STARLINK_DIR}/Perl/bin/perl $AUTOASTROM_DIR/autoastrom ${1+"$@"}
}
pisasetup () {  . $PISA_DIR/pisa.sh
}
oracdr_ircam_old () {  . ${ORAC_DIR}/etc/oracdr_ircam_old.sh
}
ps2pdf_hiq () {  ps2pdf -dPDFSETTINGS=/prepress -dAutoFilterGrayImages=false -dGrayImageFilter=/FlateEncode -dAutoFilterMonoImages=false -dMonoImageFilter=/FlateEncode -dAutoFilterColorImages=false -dColorImageFilter=/FlateEncode "$@"
}
oracdr_wfcam1 () {  . ${ORAC_DIR}/etc/oracdr_wfcam1.sh
}
oracdr_wfcam2 () {  . ${ORAC_DIR}/etc/oracdr_wfcam2.sh
}
oracdr_spex () {  . ${ORAC_DIR}/etc/oracdr_spex.sh
}
krenew () {  [ $# -eq 0 ] || { 
 cat - 1>&2  <<EOF
Usage: ${FUNCNAME}
Get a renewable kerberos ticket (requires password), and then spawn
'krb_auto_renew' to renew it as long as possible.
Bash users should call this as a function; others as a script.
krb_auto_renew should be killed at ssh logout to prevent hangs.
The function version does this automatically.
EOF

 return 1
 }
 type -ap krb_auto_renew &>/dev/null || { 
 echo "krb_auto_renew not in PATH";
 return 1
 };
 /usr/local/bin/kinit -f -p --afslog --renewable || return 1;
 krb_auto_renew & local pid=$!;
 ps -p "$pid" &>/dev/null || { 
 echo "krb_auto_renew died?";
 return 1
 };
 trap "kill $pid" EXIT;
 return 0
}
xray_heasoft_switch () {  local hvers=$1 flag32=$2;
 local hdir htype archdir init henv=HEADAS;
 hdir=${XRAY_SOFTDIR:-/data/soft}/heasoft;
 case $hvers in 
 6*16)
 hvers=6.16
 ;;
 6*15*1)
 hvers=6.15.1
 ;;
 6*15)
 hvers=6.15
 ;;
 6*14)
 hvers=6.14
 ;;
 6*13)
 hvers=6.13
 ;;
 6*12)
 hvers=6.12
 ;;
 6*11*1)
 hvers=6.11.1
 ;;
 6*11)
 hvers=6.11
 ;;
 6*0*4)
 hvers=6.0.4
 ;;
 6*0*6)
 hvers=6.0.6
 ;;
 6*1*2)
 hvers=6.1.2
 ;;
 6*1*1)
 hvers=6.1.1
 ;;
 6*3*1)
 hvers=6.3.1
 ;;
 6*3*2)
 hvers=6.3.2
 ;;
 6*4*1)
 hvers=6.4.1
 ;;
 6*5*1)
 hvers=6.5.1
 ;;
 6*6*1)
 hvers=6.6.1
 ;;
 6*6*2)
 hvers=6.6.2
 ;;
 6*6*3)
 hvers=6.6.3
 ;;
 6*1)
 hvers=6.1
 ;;
 6*2)
 hvers=6.2
 ;;
 6*3)
 hvers=6.3
 ;;
 6*4)
 hvers=6.4
 ;;
 6*5)
 hvers=6.5
 ;;
 6*6)
 hvers=6.6
 ;;
 6*7)
 hvers=6.7
 ;;
 6*8)
 hvers=6.8
 ;;
 6*9)
 hvers=6.9
 ;;
 6*10)
 hvers=6.10
 ;;
 *)
 echo "Unknown heasoft version: $hvers";
 return 1
 ;;
 esac;
 case $hvers in 
 6.[0-3] | 6.[0-3].[0-6] | 6.4)
 htype=headas;
 init=headas-init.sh
 ;;
 5*)
 htype=lheasoft;
 init=lhea-init.sh;
 henv=LHEASOFT
 ;;
 *)
 htype=heasoft;
 init=headas-init.sh
 ;;
 esac;
 grep "release 7" /etc/redhat-release &>/dev/null && [ -d $hdir/${hvers}-rhel7 ] && hvers=${hvers}-rhel7;
 if [ "$XRAY_SYSNAME" = "slac" ]; then
 hdir=`xray_sys_expand_dir $hdir/$hvers $XRAY_SYSTYPES`/$htype;
 else
 local arch=;
 case $MACHTYPE in 
 x86_64*)
 arch=x86_64/
 ;;
 esac;
 [ "$flag32" ] && arch=;
 hdir=$hdir/$hvers/${arch}$htype;
 fi;
 local um=`uname -m` xflag=;
 [ "$flag32" ] && um=i686;
 for hdir in $hdir/${um}*/ ${hdir/$arch}/i686*/;
 do
 [ -d "$hdir" ] || { 
 if [ "$um" = "x86_64" -a ! "$xflag" ]; then
 xflag=t;
 echo "No 64-bit x86_64 directory, trying 32-bit i686 version";
 continue;
 else
 echo "ERROR - no match for $hdir";
 return 1;
 fi
 };
 hdir=${hdir%/};
 break;
 done;
 xray_heasoft_blank;
 export $henv=$hdir;
 echo "Setting up HEASOFT $hvers from $hdir...";
 . $hdir/$init;
 xray_path_fix;
 return 0
}
xray_path_fix () {  local front back direc hdir cdir sdir softdir extglob;
 softdir=${XRAY_SOFTDIR:-/data/soft};
 [ "$XRAY_SYSNAME" = "slac" ] && { 
 if [ "$ZSH_VERSION" ]; then
 extglob=`setopt | grep kshglob`;
 setopt kshglob;
 else
 extglob=`shopt -p extglob`;
 shopt -s extglob;
 fi;
 softdir=${softdir/slac/slac?(.stanford.edu)}
 };
 IFS=":" eval set -- \$PATH;
 for direc in "$@";
 do
 case $direc in 
 $softdir/local/*)
 front="$front${front:+:}$direc"
 ;;
 $softdir/heasoft/*)
 hdir="$hdir${hdir:+:}$direc"
 ;;
 $softdir/cxc/*)
 cdir="$cdir${cdir:+:}$direc"
 ;;
 $softdir/starlink/*)
 sdir="$sdir${sdir:+:}$direc"
 ;;
 $softdir/*)
 back="$back${back:+:}$direc"
 ;;
 *)
 front="$front${front:+:}$direc"
 ;;
 esac;
 done;
 [ "$XRAY_SYSNAME" = "slac" ] && { 
 if [ "$ZSH_VERSION" ]; then
 [ "$extglob" ] || unsetopt kshglob;
 else
 $extglob;
 fi
 };
 PATH="$front${cdir:+:}$cdir${hdir:+:}$hdir${back:+:}$back${sdir:+:}$sdir";
 return 0
}
oracdr_wfcam3 () {  . ${ORAC_DIR}/etc/oracdr_wfcam3.sh
}
oracdr_acsis () {  . ${ORAC_DIR}/etc/oracdr_acsis.sh
}
specdresetup () {  . $FIG_DIR/specdre.sh
}
extractorsetup () {  . $EXTRACTOR_DIR/extractor.sh
}
splat () {  $SPLAT_DIR/splat ${1+"$@"}
}
sstsetup () {  . $SST_DIR/sst.sh
}
splatdispmany () {  $SPLAT_DIR/splatdispmany ${1+"$@"}
}
photom () {  . $PHOTOM_DIR/photom.sh
}
polpacksetup () {  . $POLPACK_DIR/polpack.sh
}
daophot () {  . $DAOPHOT_DIR/daophot.sh
}
starbench () {  ${STARLINK_DIR}/etc/notinst starbench
}
idlrpc () {  $IDL_DIR/bin/idlrpc "$@"
}
starmansetup () {  ${STARLINK_DIR}/etc/notinst starman
}
oracdr_cgs4 () {  . ${ORAC_DIR}/etc/oracdr_cgs4.sh
}
extractor_star () {  . $EXTRACTOR_DIR/extractor.sh
}
cupid () {  . $CUPID_DIR/cupid.sh
}
starman () {  ${STARLINK_DIR}/etc/notinst starman
}
splatdisp () {  $SPLAT_DIR/splatdisp ${1+"$@"}
}
kappasetup () {  . $KAPPA_DIR/kappa.sh
}
tsp () {  . $TSP_DIR/tsp.sh
}
oracdr_cgs4_old () {  . ${ORAC_DIR}/etc/oracdr_ocgs4.sh
}
kaprhsetup () {  . $KAPRH_DIR/kaprh.sh
}
ittlicense () {  $IDL_DIR/bin/ittlicense "$@"
}
twodspec () {  . $FIG_DIR/twodspec.sh
}
datacube () {  . $DATACUBE_DIR/datacube.sh
}
oracdr_isaac () {  . ${ORAC_DIR}/etc/oracdr_isaac.sh
}
idl () {  $IDL_DIR/bin/idl "$@"
}
oracdr_ircam () {  . ${ORAC_DIR}/etc/oracdr_ircam.sh
}
fluxnow () {  $FLUXES_DIR/fluxnow.csh
}
surf () {  . $SURF_DIR/surf.sh
}
hdstools () {  . $HDSTOOLS_DIR/hdstools.sh
}
esp () {  . $ESP_DIR/esp.sh
}
pongo () {  icl $PONGO_BIN/pongo
}
xray_sys_expand_dir () {  local dir=${1%/} systype;
 shift;
 for systype in "$@";
 do
 [ -d "$dir/$systype" ] && { 
 echo "$dir/$systype";
 return 0
 };
 done;
 return 1
}
xray_sas_switch () {  local dir=${XRAY_SOFTDIR:-/data/soft}/sas;
 local vers=$1 svers;
 case $vers in 
 6.1.0)
 svers=xmmsas_20041122_1834
 ;;
 6.5.0)
 svers=xmmsas_20050815_1803
 ;;
 7.0.0)
 svers=xmmsas_20060628_1801
 ;;
 7.1.[02])
 svers=xmmsas_20070708_1801
 ;;
 8.0.[01])
 svers=xmmsas_20080701_1801
 ;;
 9.0.0)
 svers=xmmsas_20090615_1801
 ;;
 10.0.[02])
 svers=xmmsas_20100423_1801
 ;;
 11.0.[01])
 svers=xmmsas_20110223_1801
 ;;
 12.0.0)
 svers=xmmsas_20120523_1702
 ;;
 12.0.1)
 svers=xmmsas_20120621_1321
 ;;
 13.0.[0-3])
 svers=xmmsas_20130501_1901
 ;;
 13.5.0)
 svers=xmmsas_20131209_1901
 ;;
 14.0.0)
 svers=xmmsas_20141104_1833
 ;;
 *)
 echo "Unknown SAS version: $vers";
 return 1
 ;;
 esac;
 if [ "$XRAY_SYSNAME" = "slac" ]; then
 dir=`xray_sys_expand_dir $dir/$vers $XRAY_SYSTYPES`/$svers;
 else
 dir=$dir/$svers;
 fi;
 echo "Setting up XMM SAS version $vers from $dir...";
 [ -d "$dir" ] || { 
 echo "$dir not found";
 return 1
 };
 xray_sas_blank all;
 SAS_DIR=$dir;
 SAS_PATH=$SAS_DIR;
 mkdir -p $HOME/.sas.d/config;
 [ "$SAS_PIPELINE" ] || SAS_PATH=$HOME/.sas.d/:$SAS_PATH;
 SAS_CCFPATH=${XRAY_SOFTDIR:-/data/soft}/caldb/xmm/ccf;
 SAS_IMAGEVIEWER=$XRAY_SOFTDIR/local/bin/ds9;
 SAS_CLOBBER=1;
 SAS_MEMORY_MODEL=high;
 SAS_TRACER=;
 SAS_VERBOSITY=4;
 export SAS_DIR SAS_PATH SAS_CCFPATH SAS_IMAGEVIEWER;
 export SAS_CLOBBER SAS_MEMORY_MODEL SAS_TRACER SAS_VERBOSITY;
 add_uniq PATH ${SAS_DIR}/bin ":";
 xray_path_fix;
 dir=$SAS_DIR/data;
 unset OMGRISMCAL;
 [ -r $dir/OM_Vgrism_efArea.txt ] && export OMGRISMCAL=$dir;
 return 0
}
about () {  ahelp -k "$@"
}
smurfsetup () {  . $SMURF_DIR/smurf.sh
}
module () {  eval `/usr/bin/modulecmd bash $*`
}
xoracdr () {  csh -f ${ORAC_DIR}/etc/xoracdr_start.csh ${1+"$@"}
}
period () {  ${PERIOD_DIR}/period
}
ps2pdf_nocompress () {  ps2pdf -dPDFSETTINGS=/prepress -dEncodeGrayImages=false -dEncodeMonoImages=false -dEncodeColorImages=false "$@"
}
oracdr_scuba2_450 () {  . ${ORAC_DIR}/etc/oracdr_scuba2_450.sh
}
oracdr_michelle () {  . ${ORAC_DIR}/etc/oracdr_michelle.sh
}
ccdpack () {  . $CCDPACK_DIR/ccdpack.sh
}
remove_element () {  local varname=$1 rem=$2 sep=${3-":"};
 local oIFS elem varval tsep newval;
 [ $# -lt 2 ] && return 1;
 if [ "$ZSH_VERSION" ]; then
 varval=${(P)varname};
 else
 varval=${!varname};
 fi;
 [[ $varval = *$sep ]] && tsep=t;
 oIFS=$IFS;
 IFS=$sep;
 set -- $varval;
 for elem in "$@";
 do
 [[ $elem = $rem ]] && continue;
 newval="${newval}${sep}${elem}";
 done;
 IFS=$oIFS;
 newval=${newval#$sep};
 [ $tsep ] && newval=${newval}${sep};
 eval $varname=\"$newval\"
}
kaprh () {  . $KAPRH_DIR/kaprh.sh
}
gaiadisp () {  $GAIA_DIR/gaiadisp.sh ${1+"$@"}
}
gaia () {  $GAIA_DIR/gaia.sh ${1+"$@"}
}
picard () {  ${ORAC_DIR}/etc/picard_start.sh ${1+"$@"}
}
isaac2oracdr () {  ${ORAC_DIR}/bin/isaac2oracdr.sh
}
oracdr_scuba2_850 () {  . ${ORAC_DIR}/etc/oracdr_scuba2_850.sh
}
pamelasetup () {  ${PAMELA_DIR}/pamela.sh
}
pamela () {  ${PAMELA_DIR}/pamela.sh
}
xray_caldb_switch () {  local cdir cfile cvers=$1;
 cdir=${XRAY_SOFTDIR:-/data/soft}/caldb;
 case $cvers in 
 3.1.0 | 3.2.[0-4] | 3.3.0 | 3.3.0.1 | 3.4.[0-35] | 3.5.[012345] | 4.1.[0124] | 4.2.[012] | 4.3.[01] | 4.4.[1235678] | 4.4.6.1 | 4.4.10 | 4.5.[012356789] | 4.5.5.1 | 4.6.[12357] | 4.6.1.1)
 :
 ;;
 *)
 echo "Unknown caldb version $cvers";
 return 1
 ;;
 esac;
 printf "Setting up CALDB $cvers...";
 cfile=$cdir/$cvers/software/tools/caldbinit.sh;
 if [ -r $cfile ]; then
 . $cfile;
 echo " (CALDB = $CALDB)";
 else
 echo "ERROR - $cfile not found";
 return 1;
 fi;
 return 0
}
specx () {  . $SYS_SPECX/specxstart.sh;
 command specx
}
xray_idl_switch () {  local vers=$1;
 case $vers in 
 6.[234] | 7.[01] | 8.[023] | 8.0.1)
 :
 ;;
 *)
 echo "Unknown IDL version: $vers";
 return 1
 ;;
 esac;
 local idltop=${XRAY_SOFTDIR:-/data/soft}/idl;
 local idl=$idltop/idl_$vers;
 [ -d "$idl" ] || idl=$idltop/idl${vers//\./};
 [ -d "$idl" ] || { 
 return 0
 };
 echo "Setting up IDL $vers from $idl...";
 local idl_co=rsi uidl_co;
 if xray_version_check $vers 8.2 > /dev/null; then
 idl_co=exelis;
 else
 if xray_version_check $vers 6.4 > /dev/null; then
 idl_co=itt;
 fi;
 fi;
 uidl_co=`echo "$idl_co" | tr '[a-z]' '[A-Z]'`;
 unset RSI_DIR ITT_DIR EXELIS_DIR;
 case $vers in 
 8.0*)
 eval export ${uidl_co}_DIR=${XRAY_SOFTDIR:-/data/soft};
 export LM_LICENSE_FILE=$idltop/license/license.dat
 ;;
 *)
 eval export ${uidl_co}_DIR=$idltop
 ;;
 esac;
 export IDL_DIR=$idl;
 local tool;
 unset -f rsilicense ittlicense exelislicense;
 for tool in ${idl_co}license idl idlde idlhelp idlman idlrpc idldemo;
 do
 [ -x $IDL_DIR/bin/$tool ] || continue;
 eval function $tool "(){ \$IDL_DIR/bin/$tool \"\$@\" ; }";
 [ "$ZSH_VERSION" ] || export -f $tool;
 done;
 return 0
}
oracdr_scuba () {  . ${ORAC_DIR}/etc/oracdr_scuba.sh
}
xray_version_check () {  local version=$1 needed=$2;
 [ "$version" ] && [ "$needed" ] || { 
 echo "$FUNCNAME: version/needed string is null, cannot check";
 return 0
 };
 local major minor nmajor nminor fail;
 major=${version%%.*};
 minor=${version#*.};
 minor=${minor%%.*};
 nmajor=${needed%%.*};
 nminor=${needed#*.};
 nminor=${nminor%%.*};
 if [ $major -eq $nmajor ]; then
 [ $minor -lt $nminor ] && fail=t;
 else
 if [ $major -lt $nmajor ]; then
 fail=t;
 fi;
 fi;
 [ "$fail" ] && { 
 echo "$FUNCNAME: version ($version) less than required ($needed)";
 return 1
 };
 return 0
}
dipso () {  . $DIPSO_DIR/dipsosetup.sh
}
xray_pfiles_fix () {  local pfiles_new=$1;
 [ "$pfiles_new" ] || return 0;
 case $PFILES in 
 *\;*)
 :
 ;;
 *)
 return 1
 ;;
 esac;
 local pfiles_cur=${PFILES%%;*};
 local IFS=:;
 set -- $pfiles_cur;
 rmdir "$@" 2> /dev/null;
 PFILES="$pfiles_new;${PFILES#*;}";
 set -- $pfiles_new;
 mkdir -p "$@"
}
oracdr_ufti () {  . ${ORAC_DIR}/etc/oracdr_ufti.sh
}
specdre () {  . $FIG_DIR/specdre.sh
}
ccdpacksetup () {  . $CCDPACK_DIR/ccdpack.sh
}
oracdr_gmos () {  . ${ORAC_DIR}/etc/oracdr_gmos.sh
}
twodspecsetup () {  . $FIG_DIR/twodspec.sh
}
datacubesetup () {  . $DATACUBE_DIR/datacube.sh
}
smurf () {  . $SMURF_DIR/smurf.sh
}
figaro () {  . $FIG_DIR/figaro.sh
}
atools () {  . $ATOOLS_DIR/atools.sh
}
xray_iraf_switch () {  local ivers=${1%%/};
 [ $# -eq 1 ] || return 1;
 local idir=${XRAY_SOFTDIR:-/data/soft}/iraf/$ivers;
 case $idir in 
 *iraf)
 :
 ;;
 *)
 idir=$idir/iraf
 ;;
 esac;
 [ -d $idir ] || { 
 echo "Iraf directory not found: $idir";
 return 1
 };
 export iraf=$idir/;
 [ "$ivers" = "iraf" ] && { 
 ivers=`ls -l $idir`;
 ivers=${ivers##* };
 ivers=${ivers%%/*}
 };
 case $ivers in 
 2.1[24]*)
 IRAFARCH=redhat
 ;;
 *)
 IRAFARCH=linux;
 case $MACHTYPE in 
 x86_64*)
 IRAFARCH=linux64
 ;;
 esac
 ;;
 esac;
 export IRAFARCH;
 source ${iraf}unix/hlib/irafuser.bash
}
xray_ciao_switch () {  local cdir cfile cvers=$1 caldbvers;
 cdir=${XRAY_SOFTDIR:-/data/soft}/cxc;
 case $cvers in 
 3.2.2)
 caldbvers=3.1.0
 ;;
 3.3 | 3.3.0.1)
 caldbvers=3.2.4
 ;;
 3.4)
 caldbvers=3.5.5
 ;;
 4.0b[123])
 caldbvers=3.5.5
 ;;
 4.0 | 4.0.1)
 caldbvers=3.5.5
 ;;
 4.1 | 4.1.[12])
 caldbvers=4.1.4
 ;;
 4.2 | 4.2.1)
 caldbvers=4.3.1
 ;;
 4.3)
 caldbvers=4.4.8
 ;;
 4.4 | 4.4.1)
 caldbvers=4.5.3
 ;;
 4.5)
 caldbvers=4.5.9
 ;;
 4.6 | 4.6.1)
 caldbvers=4.6.3
 ;;
 4.7)
 caldbvers=4.6.7
 ;;
 *)
 echo "Unknown CIAO version: $cvers";
 return 1
 ;;
 esac;
 cdir=$cdir/$cvers;
 if [ "$XRAY_SYSNAME" = "slac" ]; then
 cdir=`xray_sys_expand_dir $cdir $XRAY_SYSTYPES` || { 
 echo "No CIAO version $cvers for this architecture";
 return 1
 };
 else
 if [[ $MACHTYPE == x86_64* ]]; then
 [ -d $cdir/x86_64 ] && cdir=$cdir/x86_64;
 fi;
 fi;
 local locpfiles;
 [ "$ASCDS_INSTALL" ] && { 
 locpfiles=${PFILES%%;*};
 [ "$locpfiles" = "$PFILES" ] && locpfiles=
 };
 echo "Setting up CIAO $cvers from $cdir...";
 cfile=$cdir/bin/ciao.bash;
 if [ -r "$cfile" ]; then
 local savelist="XANADU PGPLOT_DIR" svar;
 for svar in $savelist;
 do
 if [ "$ZSH_VERSION" ]; then
 eval local ${svar}_old=${(P)svar};
 else
 eval local ${svar}_old=${!svar};
 fi;
 done;
 . $cfile -o;
 else
 echo "ERROR - $cfile not found";
 return 1;
 fi;
 unalias about 2> /dev/null;
 function about () 
 { 
 ahelp -k "$@"
 };
 [ "$ZSH_VERSION" ] || export -f about;
 [ "$ASCDS_INSTALL" ] && { 
 remove_element LD_LIBRARY_PATH "$ASCDS_INSTALL/*" ":";
 remove_element PYTHONPATH "$ASCDS_INSTALL/*" ":"
 };
 local svold;
 for svar in $savelist;
 do
 svold=${svar}_old;
 if [ "$ZSH_VERSION" ]; then
 [ "${(P)svold}" ] && eval $svar=${(P)svold};
 else
 [ "${!svold}" ] && eval $svar=${!svold};
 fi;
 done;
 export XPA_METHOD inet;
 xray_pfiles_fix $locpfiles;
 xray_caldb_switch $caldbvers || { 
 echo "ERROR setting up caldb version $caldbvers for this CIAO";
 return 1
 };
 xray_path_fix;
 return 0
}
convertsetup () {  . $CONVERT_DIR/convert.sh
}
convert_star () {  . $CONVERT_DIR/convert.sh
}
xray_starlink_blank () {  [ "$STARLINK_DIR" ] || return 0;
 local var starvars="FIGARO_FORMATS|ADAM_ABBRV|HDS_64BIT|STAR_LOGIN";
 for var in LD_LIBRARY_PATH PATH PERLLIB PERL5LIB MANPATH;
 do
 remove_element $var "$STARLINK_DIR/*" ":";
 done;
 set -- `declare -x`;
 for var in "$@";
 do
 [[ $var == *=* ]] || continue;
 case $var in 
 *${STARLINK_DIR}*)
 :
 ;;
 *)
 continue
 ;;
 esac;
 var=${var%%=*};
 case $var in 
 PATH | LD_LIBRARY_PATH | MANPATH | PERLLIB)
 continue
 ;;
 esac;
 starvars="$starvars${starvars:+|}$var";
 done;
 set -- `declare -Fx`;
 for var in "$@";
 do
 case $var in 
 declare | -Fx | xray_)
 continue
 ;;
 esac;
 type $var 2> /dev/null | egrep "$starvars" &>/dev/null && unset -f $var;
 done;
 local IFS="|";
 for var in $starvars;
 do
 unset $var;
 done;
 return 0
}
kappa () {  . $KAPPA_DIR/kappa.sh
}
oracdr_ufti_old () {  . ${ORAC_DIR}/etc/oracdr_ufti_old.sh
}
photomstart () {  . $PHOTOM_DIR/photom.sh
}
oracdr_uist () {  . ${ORAC_DIR}/etc/oracdr_uist.sh
}
ps2pdf () {  ps2pdf13 "$@"
}
photomsetup () {  . $PHOTOM_DIR/photom.sh
}
daophotsetup () {  . $DAOPHOT_DIR/daophot.sh
}
oracdr_naco () {  . ${ORAC_DIR}/etc/oracdr_naco.sh
}
oracdr_ingrid () {  . ${ORAC_DIR}/etc/oracdr_ingrid.sh
}
cupidsetup () {  . $CUPID_DIR/cupid.sh
}
xray_starlink_switch () {  local svers=$1;
 [ $# -eq 1 ] || return 1;
 case $svers in 
 2004b | hokulei | puana)
 [ -e /star ] || { 
 echo "Starlink version $svers needs /star link";
 return 1
 }
 ;;
 esac;
 local arch;
 case $MACHTYPE in 
 x86_64*)
 arch=x86_64
 ;;
 *)
 arch=i686
 ;;
 esac;
 local sfile=${XRAY_SOFTDIR:-/data/soft}/starlink/$svers/$arch/etc/profile;
 [ $arch = x86_64 ] && [ ! -r $sfile ] && { 
 arch=i686;
 sfile=${sfile/x86_64/$arch}
 };
 [ -r $sfile ] || { 
 echo "Setup file not found: $sfile";
 return 1
 };
 [ "$STARLINK_DIR" ] && { 
 if [ "${sfile%/etc*}" = "$STARLINK_DIR" ]; then
 echo "Starlink already at version $svers";
 case $LD_LIBRARY_PATH in 
 *$STARLINK_DIR/lib*)
 return 0
 ;;
 esac;
 else
 echo "Unsetting Starlink from $STARLINK_DIR...";
 xray_starlink_blank;
 fi
 };
 echo "Setting up Starlink from ${sfile%/etc*}...";
 . $sfile;
 xray_path_fix;
 return 0
}
tspsetup () {  . $TSP_DIR/tsp.sh
}
specxstart () {  . $SYS_SPECX/specxstart.sh
}
pisa () {  . $PISA_DIR/pisa.sh
}
sst () {  . $SST_DIR/sst.sh
}
polpack () {  . $POLPACK_DIR/polpack.sh
}
add_uniq () {  local varname=$1 value=$2 sep=${3-":"} end=$4;
 local varval;
 eval : \${$varname:=$value};
 if [ "$ZSH_VERSION" ]; then
 varval=${(P)varname};
 else
 varval=${!varname};
 fi;
 if [ "$ZSH_VERSION" ]; then
 local extglob=`setopt | grep kshglob`;
 setopt kshglob;
 else
 local extglob=`shopt -p extglob`;
 shopt -s extglob;
 fi;
 eval '[[ $varval == ?(*$sep)$value?($sep*) ]]' && return 0;
 if [ "$ZSH_VERSION" ]; then
 [ "$extglob" ] || unsetopt kshglob;
 else
 $extglob;
 fi;
 if [ "$end" ]; then
 if [ "${varval%$sep}" = "$varval" ]; then
 eval $varname=\"${varval}${sep}${value}\";
 else
 eval $varname=\"${varval}${value}${sep}\";
 fi;
 else
 eval $varname=\"${value}${sep}${varval}\";
 fi
}
oracdr_wfcam () {  . ${ORAC_DIR}/etc/oracdr_wfcam.sh
}
oracdr_niri () {  . ${ORAC_DIR}/etc/oracdr_niri.sh
}
echomopsetup () {  . $ECHOMOP_DIR/echomop.sh
}
daostart () {  . $DAOPHOT_DIR/daophot.sh
}
fluxes () {  $FLUXES_DIR/fluxes.csh ${1+"$@"}
}
figarosetup () {  . $FIG_DIR/figaro.sh
}
datacubestart () {  . $DATACUBE_DIR/datacube.sh
}
atoolssetup () {  . $ATOOLS_DIR/atools.sh
}
specxsetup () {  . $SYS_SPECX/specxstart.sh
}
fitseditor () {  csh -f ${ORAC_DIR}/etc/fitseditor_start.csh ${1+"$@"}
}
