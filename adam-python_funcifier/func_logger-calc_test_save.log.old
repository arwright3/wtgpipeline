def run_slrsdss(OBJNAME=None,fix=False):
        db_keys_t = describe_db(c,['slrsdss'])
                lensing_band = get_lensing_filts(subdir, dtop2['objname'])[0]
def distributions():
    dt = get_a_file(OBJNAME,FILTER,PPRUN)                
    d = get_fits(OBJNAME,FILTER,PPRUN, sample, sample_size)                
    db2,c = connect_except()
def compute_illum():
    dt = get_a_file(OBJNAME,FILTER,PPRUN)                
    d = get_fits(OBJNAME,FILTER,PPRUN, sample, sample_size)                
    db2,c = connect_except()
def test_plot():
def calcPlotPublish(input): 
    return
def photocalibrate(cluster,mode='SLR',aptype='_aper',test_zps=False, only_first=False, filt=None):
            lensing_bands = get_lensing_filts(subarudir, cluster)
def add_photoz_column():
def mk_detect_list(OBJNAME=None,fix=False):
    db_keys_t = describe_db(c,['clusters_db'])
        lensing_band = get_lensing_filts(os.environ['subdir'], dtop2['objname'])[0]
def run_slr(OBJNAME=None,fix=False):
        db_keys_t = describe_db(c,['clusters_db'])
                    lensing_band = get_lensing_filts(subdir, dtop2['objname'])[0]
def mk_mag_page(OBJNAME=None,fix=False):
    db_keys_t = describe_db(c,['clusters_db'])
def mk_page(OBJNAME=None,fix=False):
    db_keys_t = describe_db(c,['clusters_db'])
                output = filter(lambda z: string.find(z,'\t')!=-1, commands.getoutput('dfits ' + subdir + '/' + dtop2['objname'] + '/' + filt + '/SCIENCE/coadd_*/coadd.fits | fitsort SEEING').split('\n')[1:])
def run_mag(OBJNAME=None,fix=False):
        db_keys_t = describe_db(c,['clusters_db'])
                    lensing_band = get_lensing_filts(subdir, dtop2['objname'])[0]
def subset(cluster,filt=None):
def run_diag(OBJNAME=None,fix=False):
        db_keys_t = describe_db(c,['clusters_db'])
                    lensing_band = get_lensing_filts(subdir, dtop2['objname'])[0]
                        photocalibrate(dtop2['objname'], filt=lensing_band)
                        subset(dtop2['objname'], filt=lensing_band)    
                        run_photoz(dtop2['objname'], filt=lensing_band, short=True)
def run_cutout(OBJNAME=None,fix=False):
        db_keys_t = describe_db(c,['clusters_db'])
                    lensing_band = get_lensing_filts(subdir, dtop2['objname'])[0]
def update_clusters(OBJNAME=None,fix=False):
    db_keys_t = describe_db(c,['clusters_db'])
        commandst = 'update clusters_db set usecol="' + get_use_info(os.environ['subdir'],dtop2['objname']) + '" where objname="' + dtop2['objname'] + '"'
def run_photoz(OBJNAME=None,fix=False,filt=None,only_type=False, short=False):
        db_keys_t = describe_db(c,['clusters_db'])
                        filts = get_lensing_filts(subdir, dtop2['objname'])
def redo_coadd_list(file):
def check_coadd(OBJNAME=None,fix=False,set_redo=False):
    db_keys_t = describe_db(c,['clusters_db'])
        logfile = os.environ['sne'] + '/coadd/' + dtop2['objname']
        no_files, redo_weights, commands = coadd(dtop2['objname']) 
                    file = os.environ['subdir'] + '/' + command['OBJNAME'] + '/' + command['FILTER'] + '/SCIENCE/coadd_' + command['OBJNAME'] + '_' + type + '/coadd.fits'
def get_ending(subdir,cluster,filt):
        if glob(subdir + '/' + cluster + '/' + filt + '/SCIENCE/*_7*' + ending + 'RI.fits'): return ending + 'RI'
        if glob(subdir + '/' + cluster + '/' + filt + '/SCIENCE/*_7*' + ending + 'I.fits'): return ending + 'I'
        if glob(subdir + '/' + cluster + '/' + filt + '/SCIENCE/*_7*' + ending + '.fits'): return ending 
    else: return -99        
def get_suppression(subdir,cluster,filt):
    return dir
def get_use_info(subdir,cluster):
    return use 
def get_lensing_filts(subdir,cluster,get_lensext=False):
        return list(set(lensing_filts))
        return lensing_filts, lensing_lensext 
def coadd(OBJNAME=None,fix=False):
    lensing_filts = get_lensing_filts(subdir,OBJNAME)
        ending = get_ending(subdir,OBJNAME,f)
    return no_files, redo_weights, commands
def run_coadd(OBJNAME=None,fix=False):
        db_keys_t = describe_db(c,['clusters_db'])
        logfile = os.environ['sne'] + '/coadd/' + dtop2['objname']
        no_files, redo_weights, commands = coadd(dtop2['objname']) 
                            commandst = 'update clusters_db set ' + prefix + 'coadd="failed ' + str(datetime.now()) + '" where objname="' + dtop2['objname'] + '"'
def make_rings(objname, filter, inputRegionFile, offsetFitFile = 'fit'):
                x,y,radius,xpix_abs,ypix_abs,radii_pix,x_new,y_new=calc_ring(r[0],r[1],ras,decs,chips,xs,ys,factors)
def fit_rings():
                x,y,radius,xpix_abs,ypix_abs,radii_pix=calc_ring(supa_current,'DOMEFLAT',ra,dec,chip,x,y)
            return p * x
            return (y - fitfunc(p,x))
            return p
            return (y - fitfunc(p,x))
def calc_ring(SUPA,FLAT_TYPE,ras,decs,chip_numbers,xpix,ypix,factors=None):
        dict = get_files(SUPA,FLAT_TYPE)
        search_params = initialize(dict['FILTER'],dict['OBJNAME'])
            chip_dict = length_swarp(SUPA,FLAT_TYPE,chips)                                                                                                                                          
                    calc_tmpsave.sextract(search_params['SUPA'],search_params['FLAT_TYPE'],subpath=subdir)
                save_exposure({'fixradecCR':-2},SUPA,FLAT_TYPE)
                return -2 
                            return ra_out[0], dec_out[0]
                            return stat 
            return -1 
            return xs, ys, radii, xpix_abs, ypix_abs, radii_pix
            return xs, ys, radii, xpix_abs, ypix_abs, radii_pix, x_new, y_new
def check_scamp(cluster):
def prep_scamp(info=None):
                c = commands.getoutput('imstats ' + imchip )
    return upperlimit
def run_scamp(OBJNAME=None,fix=False):
        db_keys_t = describe_db(c,['clusters_db'])
                    db_keys_t = describe_db(c,[test + 'try_db'])
                    upperlimit = prep_scamp(dtop2['info'])
def run_correction(OBJNAME=None,FILTER=None,PPRUN=None,r_ext=False):
        db_keys_t = describe_db(c,['' + test + 'try_db'])
                OBJNAME_use, FILTER_use, PPRUN_use, sample = find_nearby(dtop2['OBJNAME'],dtop2['FILTER'],dtop2['PPRUN'])
                construct_correction(dtop2['OBJNAME'],dtop2['FILTER'],dtop2['PPRUN'],sample,'all',OBJNAME_use,FILTER_use,PPRUN_use,r_ext=r_ext)
                save_fit({'PPRUN':dtop2['PPRUN'],'OBJNAME':dtop2['OBJNAME'],'FILTER':dtop2['FILTER'],'sample':'record','sample_size':'record','correction_applied':'no match'},db='' + test + 'try_db')
def find_nearby(OBJNAME,FILTER,PPRUN):
    db_keys_t = describe_db(c,['illumination_db'])
    db_keys = describe_db(c,['' + test + 'fit_db','' + test + 'try_db'])        
        db_keys = describe_db(c,['' + test + 'try_db'])        
                return -1    
                return 0
                return 1
            return (use[0]['OBJNAME'],use[0]['FILTER'],use[0]['PPRUN'],sample)
        else: return(None,None,None,None)    
    else: return(None,None,None,None)    
def testgood():
    db_keys_t = describe_db(c,['' + test + 'try_db'])
                save_fit({'PPRUN':dtop['PPRUN'],'OBJNAME':dtop['OBJNAME'],'FILTER':dtop['FILTER'],'sample':'record','sample_size':'record','todo': 'no fit'},db='' + test + 'try_db')
                save_fit({'PPRUN':dtop['PPRUN'],'OBJNAME':dtop['OBJNAME'],'FILTER':dtop['FILTER'],'sample':'record','sample_size':'record','todo': 'failed fit'},db='' + test + 'try_db')
                db_keys = describe_db(c,['illumination_db','' + test + 'try_db'])                                                                                                                                      
                sort_results(results,db_keys)
def paper_stats():
    db_keys_t = describe_db(c,['' + test + 'try_db'])
def paper_stats2():
    db_keys_t = describe_db(c,['' + test + 'try_db'])
def sort_results(results2,db_keys):
        CONFIG_IM = find_config(GID)
        db_keys_t = describe_db(c,['' + test + 'fit_db'])
            if str(rotation_runs[y]['stats']) == 'None' or (str(rotation_runs[y][sl + 'var_correction']) == 'None' or str(rotation_runs[y][sl + 'mean']) == 'None' or str(rotation_runs[y][sl+'std'])): calc_good(rotation_runs[y]['OBJNAME'],rotation_runs[y]['FILTER'],rotation_runs[y]['PPRUN'])
        save_fit({'PPRUN':rotation_runs[y]['PPRUN'],'OBJNAME':rotation_runs[y]['OBJNAME'],'FILTER':rotation_runs[y]['FILTER'],'sample':'record','sample_size':'record','bootstrap_good': bootstrap_good},db='' + test + 'try_db')
            save_fit({'PPRUN':rotation_runs[y]['PPRUN'],'OBJNAME':rotation_runs[y]['OBJNAME'],'FILTER':rotation_runs[y]['FILTER'],'sample':'record','sample_size':'record','todo': 'good'},db='' + test + 'try_db')
            save_fit({'PPRUN':help_list[y]['PPRUN'],'OBJNAME':help_list[y]['OBJNAME'],'FILTER':help_list[y]['FILTER'],'sample':'record','sample_size':'record','todo': 'bootstrap', 'primary_catalog':help_list[y]['primary_catalog'],'primary_filt':str(help_list[y]['primary']), 'secondary_catalog':help_list[y]['secondary_catalog'], 'secondary_filt':str(help_list[y]['secondary'])},db='' + test + 'try_db')
            save_fit({'PPRUN':help_list[y]['PPRUN'],'OBJNAME':help_list[y]['OBJNAME'],'FILTER':help_list[y]['FILTER'],'sample':'record','sample_size':'record','todo': 'orphaned', 'primary_catalog':help_list[y]['primary_catalog'],'primary_filt':str(help_list[y]['primary']), 'secondary_catalog':help_list[y]['secondary_catalog'], 'secondary_filt':str(help_list[y]['secondary'])},db='' + test + 'try_db')
    return all_list
def plot_values():
    db_keys_t = describe_db(c,['' + test + 'try_db'])
    db_keys_t = describe_db(c,['' + test + 'try_db'])
def calc_good(OBJNAME=None,FILTER=None,PPRUN=None):    
    db_keys_t = describe_db(c,['' + test + 'try_db'])
        save_fit({'PPRUN':dtop['PPRUN'],'OBJNAME':dtop['OBJNAME'],'FILTER':dtop['FILTER'],'stats':'start', 'sample':'record','sample_size':'record',},db='' + test + 'try_db')
            save_fit({'PPRUN':dtop['PPRUN'],'OBJNAME':dtop['OBJNAME'],'FILTER':dtop['FILTER'],'stats':'no fits', 'sample':'record','sample_size':'record',},db='' + test + 'try_db')
                    db_keys_f = describe_db(c,['' + test + 'fit_db'])                                                                                                                          
                        save_fit({'PPRUN':dtop['PPRUN'],'OBJNAME':dtop['OBJNAME'],'FILTER':dtop['FILTER'],sample + '_zpstd':zpstd, 'zp_images': drand['zp_images'], 'sample':'record','sample_size':'record',},db='' + test + 'try_db')
                    db_keys_f = describe_db(c,['' + test + 'fit_db'])                                                                                                                          
                        save_fit({'PPRUN':dtop['PPRUN'],'OBJNAME':dtop['OBJNAME'],'FILTER':dtop['FILTER'],'rots': int(len(rots)), 'sample':'record','sample_size':'record',},db='' + test + 'try_db')
                    db_keys_f = describe_db(c,['' + test + 'fit_db'])
                            epsilon, diff_bool = test_correction(dtop['OBJNAME'],dtop['FILTER'],dtop['PPRUN'],drand['sample'],drand['sample_size'])
                        save_fit({'PPRUN':dtop['PPRUN'],'OBJNAME':dtop['OBJNAME'],'FILTER':dtop['FILTER'],sample + '_mean':mean, sample + '_std':std, sample + '_var_correction': var_correction, 'sample':'record','sample_size':'record',},db='' + test + 'try_db')
                    db_keys_f = describe_db(c,['' + test + 'fit_db'])
                        save_fit({'PPRUN':dtop['PPRUN'],'OBJNAME':dtop['OBJNAME'],'FILTER':dtop['FILTER'],sample + '_match_stars':drand['match_stars'],'sample':'record','sample_size':'record',},db='' + test + 'try_db')
                            save_fit({'PPRUN':dtop['PPRUN'],'OBJNAME':dtop['OBJNAME'],'FILTER':dtop['FILTER'],'match_stars':drand['match_stars'],'sdss_imp_all':factor/num, 'sample':'record','sample_size':'record',},db='' + test + 'try_db')
                    db_keys_f = describe_db(c,['' + test + 'fit_db'])
                            save_fit({'PPRUN':dtop['PPRUN'],'OBJNAME':dtop['OBJNAME'],'FILTER':dtop['FILTER'],'sdss_imp':factor/num, 'sample':'record','sample_size':'record',},db='' + test + 'try_db')
                save_fit({'PPRUN':dtop['PPRUN'],'OBJNAME':dtop['OBJNAME'],'FILTER':dtop['FILTER'],'stats':'yes', 'sample':'record','sample_size':'record',},db='' + test + 'try_db')
def test_correction(OBJNAME,FILTER,PPRUN,sample,sample_size,paper_stat=False):
    dt = get_a_file(OBJNAME,FILTER,PPRUN)                
    d = get_fits(OBJNAME,FILTER,PPRUN, sample, sample_size)                
    return epsilon, diff_bool
def describe_db_long(c,db=['illumination_db']):
    return keys    
def fix_table3():
    db_keys = describe_db_long(c,['' + test + 'try_db','illumination_db'])
def find_bad_rot():
    db_keys_f = describe_db(c,['' + test + 'try_db'])
        db_keys_t = describe_db(c,['' + test + 'fit_db'])        
            db_keys_i = describe_db(c,['illumination_db'])                                                                                                      
def update_fit_db():
    db_keys_f = describe_db(c,['illumination_db'])
def fix_table_all():
    db_keys_f = describe_db(c,['' + test + 'try_db','illumination_db'])
def fix_table():
    db_keys_f = describe_db(c,['' + test + 'try_db'])
def fix_try2():
    db_keys_f = describe_db(c,['try_db'])
def update_9():
    db_keys_f = describe_db(c,['illumination_db','' + test + 'try_db'])
def add_config():
    db_keys_f = describe_db(c,['' + test + 'try_db'])
            db_keys = describe_db(c,['illumination_db'])                                                                                                                          
def fix_try():
    db_keys_f = describe_db(c,['' + test + 'try_db'])
def check_format():
    db_keys_f = describe_db(c,['' + test + 'try_db'])
        db_keys = describe_db(c,['' + test + 'fit_db'])
def delete_nodata_table():
    db_keys_f = describe_db(c,['illumination_db'])
def fix_objname():
    db_keys_f = describe_db(c,['illumination_db'])
def variance(data,err):
    variance = scipy.var(data)
    return variance, weight_variance, redchi
def random_cmp(x,y):
    if a > b: return 1
    else: return -1
def bright_cmp(x,y):
    if x['mag'] > y['mag']: return 1
    else: return -1
def starStats(supas):
    return dict
def length_swarp(SUPA,FLAT_TYPE,CHIPS):
    dict = get_files(SUPA,FLAT_TYPE)
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
    save_exposure(all_chip_dict,SUPA,FLAT_TYPE)                                                                                                                                                           
    return all_chip_dict
def fix_radec(SUPA,FLAT_TYPE):
    dict = get_files(SUPA,FLAT_TYPE)
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
        chip_dict = length_swarp(SUPA,FLAT_TYPE,chips)                                                                                                                                          
            calc_tmpsave.sextract(search_params['SUPA'],search_params['FLAT_TYPE'])
            save_exposure({'fixradecCR':-2},SUPA,FLAT_TYPE)
            return -2 
            save_exposure({'fixradecCR':1},SUPA,FLAT_TYPE)
            return 1 
        save_exposure({'fixradecCR':-1},SUPA,FLAT_TYPE)
        return -1 
def mk_tab(list):
    return hdu
def merge(t1,t2):
    return hdu
def cutout(infile,mag,color='red'):
def get_median(cat,key):
    return magdiff[int(len(magdiff)/2)] 
def coordinate_limits(cat):
    return ra[0],ra[-1],dec[0],dec[-1]
def combine_cats(cats,outfile,search_params):
def paste_cats(cats,outfile):
def imstats(SUPA,FLAT_TYPE):
    dict = get_files(SUPA,FLAT_TYPE)
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
        op = commands.getoutput('imstats ' + dict['files'][0]) 
                line = line.replace('$ imstats: ','')
    save_exposure(dict,SUPA,FLAT_TYPE)
def save_fit_WHATISTHIS(fits,im_type,type,SUPA,FLAT_TYPE):
    save_exposure(dict,SUPA,FLAT_TYPE)
def select_analyze():
    db2,c = connect_except()
            analyze(dict['SUPA'],dict['FLAT_TYPE'],dict)
                construct_correction(dict['OBJNAME'],dict['FILTER'],dict['PPRUN'])
            d_update = get_files(dict['SUPA'],dict['FLAT_TYPE'])
                save_exposure({'ACTIVE':'YES','TIME':str(time.time())},dict['SUPA'],dict['FLAT_TYPE'])
                analyze(dict['SUPA'],dict['FLAT_TYPE'],dict)
                save_exposure({'ACTIVE':'FINISHED'},dict['SUPA'],dict['FLAT_TYPE'])
def analyze(SUPA,FLAT_TYPE,params={}):
            find_seeing(SUPA,FLAT_TYPE)      
        sextract(SUPA,FLAT_TYPE)
def get_files(SUPA,FLAT_TYPE=None):    
    db2,c = connect_except()
    return dict
def get_a_file(OBJNAME,FILTER,PPRUN):    
    db2,c = connect_except()
    return dict
def get_fits(OBJNAME,FILTER,PPRUN,sample, sample_size):    
    db2,c = connect_except()
    db_keys = describe_db(c,'' + test + 'fit_db')
    return dtop
def connect_except():
    return db2,c
def save_exposure(dict,SUPA=None,FLAT_TYPE=None):
    db2,c = connect_except()
def initialize(filter,OBJNAME):
    return search_params
def update_dict(SUPA,FLAT_TYPE):    
    dict = get_files(SUPA,FLAT_TYPE)
    kws = utilities.get_header_kw(dict['file'],['ROTATION','OBJECT','GABODSID','CONFIG','EXPTIME','AIRMASS','INSTRUM','PPRUN','BADCCD']) 
    save_exposure(kws,SUPA,FLAT_TYPE)
def gather_exposures(OBJNAME,filters=None):
        search_params = initialize(filter_name,OBJNAME) 
                    kws = utilities.get_header_kw(file,['CRVAL1','CRVAL2','ROTATION','OBJECT','GABODSID','CONFIG','EXPTIME','AIRMASS','INSTRUM','PPRUN','BADCCD']) 
                    save_exposure(exposures[exp_name]['keywords'])
    return exposures
def find_seeing(SUPA,FLAT_TYPE):     
    dict = get_files(SUPA,FLAT_TYPE)
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
    save_exposure({'fwhm':fwhm},SUPA,FLAT_TYPE)
def length_DONTUSE(SUPA,FLAT_TYPE):
    dict = get_files(SUPA,FLAT_TYPE)
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
    save_exposure({'path':search_params['path'],'fil_directory':search_params['fil_directory']},SUPA,FLAT_TYPE)
    save_exposure(all_chip_dict,SUPA,FLAT_TYPE)
    return chips
def apply_correction2(SUPA,FLAT_TYPE):
        d = get_fits(CLUSTER,FILTER,PPRUN)                
            save_fit({'PPRUN':PPRUN,'FILTER':FILTER,'CLUSTER':CLUSTER,sample+'$'+sample_size+'$'+str(ROT)+'$im':im})
def sdss_coverage(SUPA,FLAT_TYPE):
    dict = get_files(SUPA,FLAT_TYPE)
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
        dict = get_files(SUPA,FLAT_TYPE)
        if len(lines) > 1: sdss_coverage=True 
        else: sdss_coverage=False 
        save_exposure({'sdss_coverage':sdss_coverage},SUPA,FLAT_TYPE)
    sdss_coverage = results[0][0]
    if string.find(sdss_coverage,'True') != -1:
    return cov, galaxycat, starcat
def sextract(SUPA,FLAT_TYPE):
    dict = get_files(SUPA,FLAT_TYPE)
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
            dict_uncorrected = get_files(SUPA[:-1],FLAT_TYPE)                                                               
            save_exposure(d,SUPA,FLAT_TYPE)                                                                                 
            dict = get_files(SUPA,FLAT_TYPE)
            search_params = initialize(dict['FILTER'],dict['OBJNAME'])
                                save_exposure({'ASTROMETRYNET_' + NUM:'None'},SUPA,FLAT_TYPE)
                                dict = get_files(dict['SUPA'],dict['FLAT_TYPE'])
                                save_exposure({'ASTROMETRYNET_' + NUM:'yes'},SUPA,FLAT_TYPE)
                                    save_exposure(wcsdict,SUPA,FLAT_TYPE)
                                    dict = get_files(dict['SUPA'],dict['FLAT_TYPE'])
                                    command = "nice sex %(TEMPDIR)s%(ROOT)s.fixwcs.fits,%(file_double)s -c %(PHOTCONF)s/phot.conf.sex \
                                    -PARAMETERS_NAME %(PHOTCONF)s/phot.param.sex \
                            combine_cats(doubles_output,outfile,search_params)
        paste_cats(files,pasted_cat)
    save_exposure({'pasted_cat':pasted_cat},SUPA,FLAT_TYPE)
def get_sdss_obj_ext(SUPA, FLAT_TYPE):
    dict = get_files(SUPA,FLAT_TYPE)
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
        ramin,ramax, decmin, decmax = coordinate_limits(catalog)    
    save_exposure({'starcat':cat},SUPA,FLAT_TYPE)
    return cat
def get_sdss_obj(SUPA, FLAT_TYPE):
    dict = get_files(SUPA,FLAT_TYPE)
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
        ramin,ramax, decmin, decmax = coordinate_limits(catalog)    
    save_exposure({'starcat':cat},SUPA,FLAT_TYPE)
def match_simple(SUPA,FLAT_TYPE):
    dict = get_files(SUPA,FLAT_TYPE)
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
        ramin,ramax, decmin, decmax = coordinate_limits(catalog)    
        command = 'match_simple.sh ' + catalog + ' ' + cat + ' ' + outcat
        save_exposure({'matched_cat_' + type:outcat},SUPA,FLAT_TYPE)
def phot(SUPA,FLAT_TYPE): 
    dict = get_files(SUPA,FLAT_TYPE)
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
            median = get_median('' + search_params['TEMPDIR'] + 'all.diffA.cat','magdiff')
            save_exposure({'fit_cat_' + im_type + '_' + type: outcat,'airmass_add':'yes'},SUPA,FLAT_TYPE)
            save_fit(good['fits'],im_type,type,SUPA,FLAT_TYPE)
def nightrun():
    db_keys = describe_db(c)
        db_keys = describe_db(c)
                    dict = get_files(dict['SUPA'],dict['FLAT_TYPE'])
                    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
                    photo_abs_new.calcDataIllum(file,search_params['LENGTH1'], search_params['LENGTH2'], 1000, args['corr_data'], args['airmass_good'], args['color1_good'], args['color2_good'], args['magErr_good'], args['X_good'], args['Y_good'],rot=0)
def auto_print():
    db_keys = describe_db(c)
                dict = get_files(dict['SUPA'],dict['FLAT_TYPE'])
                search_params = initialize(dict['FILTER'],dict['OBJNAME'])
                photo_abs_new.calcDataIllum(file,search_params['LENGTH1'], search_params['LENGTH2'], 1000, args['corr_data'], args['airmass_good'], args['color1_good'], args['color2_good'], args['magErr_good'], args['X_good'], args['Y_good'],rot=0)
def describe_db(c,db=['illumination_db']):
    return keys    
def printer():
                dict = get_files(dict['SUPA'],dict['FLAT_TYPE'])
                search_params = initialize(dict['FILTER'],dict['OBJNAME'])
                photo_abs_new.calcDataIllum(file,search_params['LENGTH1'], search_params['LENGTH2'], 1000, args['corr_data'], args['airmass_good'], args['color1_good'], args['color2_good'], args['magErr_good'], args['X_good'], args['Y_good'],rot=0)
    if 1: images = gather_exposures(filter,OBJNAME)
        if 1: image.find_seeing(exposures) 
        if 1: image.sextract(exposures)
        if 1: image.match_simple(exposures,OBJNAME)
        if 1: image.phot(exposures,filter,type,LENGTH1,LENGTH2)
def get_sdss(dict):
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
        ramin,ramax, decmin, decmax = coordinate_limits(catalog)    
    return starcat
def match_PPRUN(OBJNAME=None,FILTER=None,PPRUN=None):
    db_keys = describe_db(c,['illumination_db','' + test + 'fit_db'])
            match_many_multi_band(input)
        return repr(self.value)      
def match_OBJNAME(OBJNAME=None,FILTER=None,PPRUN=None,todo=None):
        db_keys_f = describe_db(c,['illumination_db'])
                try_db_keys = describe_db(c,['' + test + 'try_db'])       
                ill_db_keys = describe_db(c,['illumination_db']) 
        if len(results) ==0: return
            save_fit({'PPRUN':PPRUN,'OBJNAME':OBJNAME,'FILTER':FILTER,'sample':'record','sample_size':'record'},db='' + test + 'try_db')
            db_keys = describe_db(c,['' + test + 'try_db'])                                                                                                                                      
            db_keys = describe_db(c,['illumination_db'])                                                                                                                                      
                        ana = '' 
                                analyze(d['SUPA'],d['FLAT_TYPE'])
                            a = fix_radec(d['SUPA'],d['FLAT_TYPE'])
                        finalcat = match_many_multi_band([[dict_temp['primary_catalog'],'primary'],[dict_temp['secondary_catalog'],'secondary']])
                        sdss_cov,galaxycat,starcat = sdss_coverage(d['SUPA'],d['FLAT_TYPE']) 
                            sdssmatch = get_cats_ready(d['SUPA'],d['FLAT_TYPE'],galaxycat,starcat)
                    d = get_files(d['SUPA'],d['FLAT_TYPE'])
                    match_many(input)                                                                   
                    start_EXPS = getTableInfo()   
                    dt = get_files(start_EXPS[start_EXPS.keys()[0]][0])
                    CONFIG = find_config(dt['GABODSID'])
                    EXPS, star_good,supas, totalstars, mdn_background = selectGoodStars(start_EXPS,match,LENGTH1,LENGTH2,CONFIG)               
                    info = starStats(supas)
                    uu = open(tmpdir + '/selectGoodStars','w')
                    save_fit({'PPRUN':PPRUN,'OBJNAME':OBJNAME,'FILTER':FILTER,'logfile':illum_dir+'logfile','sample':'record','sample_size':'record',str(match)+'status':'started','fit_time':str(time.localtime())},db='' + test + 'try_db')
                        CONFIG = find_config(d['GABODSID'])
                        linear_fit(OBJNAME,FILTER,PPRUN,None,match,CONFIG,primary=primary,secondary=secondary)
                        save_fit({'PPRUN':PPRUN,'OBJNAME':OBJNAME,'FILTER':FILTER,'logfile':str(illum_dir)+'logfile','sample':str('record'),'sample_size':'record',str(match)+'status':'fitfinished','test_check':'yes','sample_current':str(match),'fit_time':str(time.localtime())},db='' + str(test) + 'try_db')
                    save_fit({'PPRUN':PPRUN,'OBJNAME':OBJNAME,'FILTER':FILTER,'logfile':illum_dir+'logfile','sample':'record','sample_size':'record',str(match)+'status':'failed','fit_time':str(time.localtime()),'exception':e.value},db='' + test + 'try_db')
                    save_fit({'PPRUN':PPRUN,'OBJNAME':OBJNAME,'FILTER':FILTER,'logfile':illum_dir+'logfile','sample':'record','sample_size':'record',str(match)+'status':'failed','fit_time':str(time.localtime()),'exception':'no information'},db='' + test + 'try_db')
def find_config(GID):   
    return CONFIG_IM
def add_correction_new(cat_list,OBJNAME,FILTER,PPRUN):
    dt = get_a_file(OBJNAME,FILTER,PPRUN)                
    d = get_fits(OBJNAME,FILTER,PPRUN)                
    return cat_grads 
def add_gradient(cat_list):
    return cat_grads 
def add_correction(cat_list):
    EXPS = getTableInfo()
    return cat_grads 
def make_ssc_config(list):
def make_ssc_multi_color(list):
    return Ns
def make_ssc_config_few(list):
def make_ssc_config_colors(list):
def threesec():
    match_many(list,True)
def match_many(list,color=False):
        make_ssc_config_colors(list) 
        make_ssc_config_few(list) 
def match_many_multi_band(list,color=False):
    Ns = make_ssc_multi_color(list)
    return outcat
def match_inside(SUPA1,SUPA2,FLAT_TYPE):
    dict1 = get_files(SUPA1,FLAT_TYPE)
    search_params1 = initialize(dict1['FILTER'],dict1['OBJNAME'])
    dict2 = get_files(SUPA2,FLAT_TYPE)
    search_params2 = initialize(dict2['FILTER'],dict2['OBJNAME'])
    save_exposure({'matched_cat_self':outcat},SUPA1,FLAT_TYPE)
def getTableInfo():
    return ROTS
def diffCalcNew():
def starConstruction(EXPS):
    tnew = mk_tab([[medians,'median'],[stds,'std']])
    tall = merge(tnew,p)
def selectGoodStars(EXPS,match,LENGTH1,LENGTH2,CONFIG):
    supas.sort(sort_supas)
    return EXPS, star_good, supas, totalstars, mdn_background
def sort_supas(x,y):
        return 1            
    else: return -1
def diffCalc(SUPA1,FLAT_TYPE):
    dict = get_files(SUPA1,FLAT_TYPE)
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
    calcDataIllum(file,search_params['LENGTH1'], search_params['LENGTH2'],data,magErr,X,Y) 
    return data_save, magErr_save, X_save, Y_save
def linear_fit(OBJNAME,FILTER,PPRUN,run_these=None,match=None,CONFIG=None,primary=None,secondary=None):
    start_EXPS = getTableInfo()                                                                                                                                     
    dt = get_files(start_EXPS[start_EXPS.keys()[0]][0])
        EXPS, star_good,supas, totalstars, mdn_background = selectGoodStars(start_EXPS,match,LENGTH1,LENGTH2,CONFIG)               
        uu = open(tmpdir + '/selectGoodStars','w')
        info = starStats(supas)
    f=open(tmpdir + '/selectGoodStars','r')
            db_keys_t = describe_db(c,['' + test + 'fit_db']) 
        save_fit({'PPRUN':PPRUN,'FILTER':FILTER,'OBJNAME':OBJNAME,'sample':sample,'sample_size':sample_size,'primary_filt':primary,'secondary_filt':secondary,'coverage':str(match),'relative_colors':relative_colors,'catalog':str(match),'CONFIG':CONFIG,'supas':len(supas),'match_stars':len(filter(lambda x:x['match'],supas))})
            l.sort(random_cmp)
                        calcDataIllum(sample + 'reducedchi'+str(ROT)+FILTER,LENGTH1,LENGTH2,scipy.array(all_resids),scipy.ones(len(all_resids)),scipy.array(all_x),scipy.array(all_y),pth=illum_dir,rot=0,limits=[-10,10],ylab='Residual/Error') 
                        save_fit(dtmp)
                    save_fit(dtmp)
                    save_fit({'PPRUN':PPRUN,'OBJNAME':OBJNAME,'FILTER':FILTER,'format':'good','sample':'record','sample_size':'record'},db='' + test + 'try_db')
                    save_fit({'FILTER':FILTER,'OBJNAME':OBJNAME,'PPRUN':PPRUN,'sample':sample,'sample_size':sample_size,'catalog':outcat})
                    d = get_fits(OBJNAME,FILTER,PPRUN, sample, sample_size)                
                            save_fit({'PPRUN':PPRUN,'FILTER':FILTER,'OBJNAME':OBJNAME,'sample':sample,'sample_size':sample_size,str(ROT)+'$im':im})
                            save_fit({'linearplot':1,'PPRUN':PPRUN,'FILTER':FILTER,'OBJNAME':OBJNAME,'sample':sample,'sample_size':sample_size,str(ROT)+'$im':im})
                            calcDataIllum(sample + kind + 'nocorr'+str(ROT)+FILTER,10000,8000,data2,magErr[ROT],X[ROT],Y[ROT],pth=illum_dir,rot=0,good=[Star[ROT],keyvalue]) 
                            var = variance(data2,magErr[ROT])
                                calcDataIllum(calcim,10000,8000,epsilon,magErr[ROT],X[ROT],Y[ROT],pth=illum_dir,rot=0,good=[Star[ROT],keyvalue])
                                calcDataIllum(calcim,10000,8000,data2,magErr[ROT],X[ROT],Y[ROT],pth=illum_dir,rot=0,good=[Star[ROT],keyvalue])
                                var = variance(data2,magErr[ROT])
                            save_fit(dtmp)
    return
def mk_average_correction():
    return 
def construct_correction(OBJNAME,FILTER,PPRUN,sample,sample_size,OBJNAME_use=None,FILTER_use=None,PPRUN_use=None,r_ext=True):
    save_fit({'PPRUN':PPRUN,'OBJNAME':OBJNAME,'FILTER':FILTER,'sample':'record','sample_size':'record','correction_applied':'corrstarted','OBJNAME_use':OBJNAME_use,'FILTER_use':FILTER_use,'PPRUN_use':PPRUN_use,'sample_use':sample,'time':str(time.localtime())},db='' + test + 'try_db')
        dt = get_a_file(OBJNAME,FILTER,PPRUN)                
        d = get_fits(OBJNAME_use,FILTER_use,PPRUN_use, sample, sample_size)                
            save_fit({'PPRUN':PPRUN,'FILTER':FILTER,'OBJNAME':OBJNAME,'sample':sample,'sample_size':sample_size,sample+'$'+sample_size+'$'+str(ROT)+'$im':im})
            db2,c = connect_except()
            db_keys = describe_db(c,'illumination_db')
                                            save_exposure({'illumination_match':sample,'time':str(time.localtime())},dt['SUPA'],dt['FLAT_TYPE'])
                            save_fit({'PPRUN':PPRUN,'OBJNAME':OBJNAME,'FILTER':FILTER,'logfile':illum_dir+'logfile','sample':'record','sample_size':'record','time':str(time.localtime()),'apply_exception':e.value},db='' + test + 'try_db')
                            save_fit({'PPRUN':PPRUN,'OBJNAME':OBJNAME,'FILTER':FILTER,'logfile':illum_dir+'logfile','sample':'record','sample_size':'record','time':str(time.localtime()),'apply_exception':'corruption'},db='' + test + 'try_db')
        save_fit({'PPRUN':PPRUN,'OBJNAME':OBJNAME,'FILTER':FILTER,'sample':'record','sample_size':'record','correction_applied':'finished','OBJNAME_use':OBJNAME_use,'FILTER_use':FILTER_use,'PPRUN_use':PPRUN_use,'sample_use':sample,'time':str(time.localtime())},db='' + test + 'try_db')
        save_fit({'PPRUN':PPRUN,'OBJNAME':OBJNAME,'FILTER':FILTER,'sample':'record','sample_size':'record','correction_applied':'failed','OBJNAME_use':OBJNAME_use,'FILTER_use':FILTER_use,'PPRUN_use':PPRUN_use,'sample_use':sample,'time':str(time.localtime())},db='' + test + 'try_db')
def correct_image():
        d = get_fits(CLUSTER,FILTER,PPRUN)                
def residual_plots():
                save_fit({'PPRUN':PPRUN,'FILTER':FILTER,'CLUSTER':CLUSTER,sample+'$'+sample_size+'$'+ele['name'].replace('$','$'):fitvars[ele['name'][2:]]})
        save_fit({'PPRUN':PPRUN,'FILTER':FILTER,'CLUSTER':CLUSTER,sample+'$'+sample_size+'$'+str(ROT)+'$im':im})
    return
def fit():
    EXPS = getTableInfo()
    star_good = selectGoodStars(EXPS)
            name = make_name(fit['class'].smodel[ele])
        calcIllum(10000, 10000, 100, fit)
def make_name(name): 
    return name
def convert_SDSS_cat(SUPA,FLAT_TYPE):
    dict = get_files(SUPA,FLAT_TYPE)
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
    save_exposure({'sdssmatch':outcat},SUPA,FLAT_TYPE)
def apply_photometric_calibration(SUPA,FLAT_TYPE,starcat):
    dict = get_files(SUPA,FLAT_TYPE)
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
    save_exposure({'sdssmatch':outcat},SUPA,FLAT_TYPE)
def get_cats_ready(SUPA,FLAT_TYPE,galaxycat,starcat):
    dict = get_files(SUPA,FLAT_TYPE)
    search_params = initialize(dict['FILTER'],dict['OBJNAME'])
        return index
        save_exposure({type + 'sdssmatch':outcat},SUPA,FLAT_TYPE)
    calc_tmpsave.paste_cats([tmp['starsdssmatch']],outcat,index=1)
    return outcat 
def plot_color(color,data,a=None,m=None):
def hold():
def save_fit(dict,OBJNAME=None,FILTER=None,PPRUN=None,db=test + 'fit_db'):
    db2,c = connect_except()
    db_keys = describe_db(c,db)
def gather_exposures_all(filters=None):
                                    kws = utilities.get_header_kw(file,['CRVAL1','CRVAL2','ROTATION','OBJECT','GABODSID','CONFIG','EXPTIME','AIRMASS','INSTRUM','PPRUN','BADCCD','FILTER']) 
                                    save_exposure(exposures[exp_name]['keywords'])
    return exposures 
def run_telarchive(ra,dec,objname):
    return d 
def get_observations():
    db_keys = describe_db(c)
        dict = run_telarchive(float(dtop['CRVAL1']),dtop['CRVAL2'],dtop['OBJNAME'])
def calcDataIllum(file, LENGTH1, LENGTH2, data,magErr, X, Y, pth='/nfs/slac/g/ki/ki04/pkelly/plots/', rot=0, good=None, limits=[-0.4,0.4], ylab='SUBARU-SDSS'):
    return
def loop_test():
    db_keys = describe_db(c,[test + 'try_db'])        
            match_OBJNAME(dtop['objname_use'],dtop['filter_use'],dtop['pprun_use'],dtop['sample_use']) 
def compare_fits(): 
    db_keys = describe_db(c,[test + 'try_db'])                                                    
def gather_exposures_adam_version(OBJNAME="MACS0416-24",filters=["W-J-B","W-C-RC","W-S-Z+"],runs=["2010-11-04","2010-11-04","2010-11-04"]):
		search_params = initialize(filter_name,OBJNAME)
					kws = utilities.get_header_kw(file,['CRVAL1','CRVAL2','ROTATION','OBJECT','GABODSID','CONFIG','EXPTIME','AIRMASS','INSTRUM','PPRUN','BADCCD']) 
					save_exposure(exposures[exp_name]['keywords'])
	return exposures_all
    run_correction()
